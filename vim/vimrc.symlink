set nocompatible        " Eliminate backwards-compatibility
syntax on               " Syntax highlighting


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Plugins (NeoBundle)
"==========================================================

filetype off            " Req'd for NeoBundle
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'


"     Bundles
"----------------------------------------------------------

" Integration
NeoBundle 'tpope/vim-fugitive', { 'augroup': 'fugitive' }
NeoBundle 'rking/ag.vim', {
      \     'lazy': 1,
      \     'on_cmd': ['Ag', 'LAg']
      \ }
NeoBundle 'christoomey/vim-tmux-navigator'

" Status
NeoBundle 'bling/vim-airline'
" TODO Load on-demand
NeoBundle 'scrooloose/syntastic', {
      \     'lazy': 1,
      \     'on_cmd': ['SyntasticCheck']
      \ }

" Files
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'vim-ctrlspace/vim-ctrlspace'
NeoBundle 'qpkorr/vim-bufkill'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neoyank.vim'

" Editing
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'godlygeek/tabular', {
      \     'lazy': 1,
      \     'on_cmd': ['Tabularize']
      \ }
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'haya14busa/incsearch.vim', {
      \     'lazy': 1,
      \     'on_map': ['<Plug>(incsearch-']
      \ }
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-sleuth'

" Syntax
NeoBundle 'tpope/vim-markdown', {
      \     'on_ft': ['markdown']
      \ }
NeoBundle 'pangloss/vim-javascript', {
      \     'on_ft': ['javascript']
      \ }
NeoBundle 'mxw/vim-jsx', {
      \     'on_ft': ['javascript', 'jsx']
      \ }
NeoBundle 'cespare/vim-toml', {
      \     'on_ft': ['toml']
      \ }

" Colors
NeoBundle 'morhetz/gruvbox'

" TODO: Try these out
"NeoBundle 'chrisbra/NrrwRgn'
"NeoBundle 'mattn/emmet-vim'
"NeoBundle 'Valloric/YouCompleteMe'
"NeoBundle 'SirVer/ultisnips'
"NeoBundle 'mikewest/vimroom'
"NeoBundle 'tpope/vim-dispatch'

"Plugin Manager: Shougo/dein.vim
"Plugin Manager: junegunn/vim-plug

" Disabled:
" Being slow
"NeoBundle 'airblade/vim-gitgutter'
" Need to test more
"NeoBundle 'grassdog/tagman.vim'
" Prefer Sneak
"NeoBundle 'Lokaltog/vim-easymotion'
" BufKill sufices
"NeoBundle 'ton/vim-bufsurf'
" Experiment w/ themes someday
"NeoBundle 'junegunn/seoul256.vim'
" Using ctrlspace, unite, or fzf instead
"NeoBundle 'ctrlpvim/ctrlp.vim'
" Slow and not needed
"NeoBundle 'mhinz/vim-signify'
" Never used it
"NeoBundle 'terryma/vim-expand-region'
" Never used it
"NeoBundle 'tpope/vim-surround'
" Became annoying
"NeoBundle 'terryma/vim-smooth-scroll'
" Never used it
"NeoBundle 'tpope/vim-haml'


"     End NeoBundle
"----------------------------------------------------------

call neobundle#end()
filetype plugin indent on   " Req'd for NeoBundle

NeoBundleCheck



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   General settings
"==========================================================

" Prevent vim from adding empty line at the end of every file
set noeol
set binary

" UTF-8/Unicode support
if has('multi_byte')
  if (!has('nvim'))
    scriptencoding utf-8
    set encoding=utf-8
  endif
end


"     Presentation
"----------------------------------------------------------

set number              " Precede each line with its line number
set numberwidth=5       " Number of columns for line numbers
if exists('+relativenumber')
  set relativenumber    " Uses line numbers relative to current
endif
set textwidth=0         " Do not wrap words (insert)
set nowrap              " Do not wrap words (view)
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ruler               " Line and column number of the cursor position
set wildmenu            " Enhanced command completion
set visualbell          " Use visual bell instead of beeping
set laststatus=2        " Always show the status line
set noshowmode          " Hide mode since airline already displays it
set lazyredraw

" Highlight spell errors
hi SpellErrors guibg=red guifg=black ctermbg=red ctermfg=black

" Splits
set fcs=vert:│          " Vertical split separator
set splitright          " Always splits to the right
set splitbelow          " Always splits below

" Hide cursor lines when in another buffer
set cursorline
autocmd WinLeave * setlocal nocursorline
autocmd WinEnter * setlocal cursorline
set cursorcolumn
autocmd WinLeave * setlocal nocursorcolumn
autocmd WinEnter * setlocal cursorcolumn

" Cursor settings. This makes terminal vim sooo much nicer!
" Tmux will only forward escape sequences to the terminal if surrounded by a DCS
" sequence
if exists('$TMUX')
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif


"     Behavior
"----------------------------------------------------------

" Ignore these files when completing & in explorer
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

set autowriteall        " Automatically save before commands (:next & :make)
set hidden              " Enable multiple modified buffers
set history=200         " Command line history
set autoread            " Automatically read file that has been changed on disk
                        " and doesn't have changes in vim
set modelines=0         " Turn off modelines
set scrolloff=3         " Scroll when within 5 lines of top/bottom
if !&sidescrolloff
  set sidescrolloff=5   " Scroll when with 5 lines of sides
endif
set backspace=indent,eol,start    " Sane backspaces
set guioptions-=T       " Disable toolbar"
set ttimeoutlen=50      " Fast Esc to normal mode
set completeopt=menuone,preview

" Writes to the unnamed register also writes to the * and + registers. This
" makes it easy to interact with the system clipboard
if has ('unnamedplus')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" Auto save
autocmd BufLeave,CursorHold,CursorHoldI,FocusLost * silent! wa

augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif


"     Whitespace
"----------------------------------------------------------

" Soft tab settings
set autoindent          " Automatically indent new line
set ts=4                " Number of spaces in a tab
set sw=4                " Number of spaces for indent
set softtabstop=4       " Number of spaces in softtab
set et                  " Expand tabs into spaces

" Some indentation options ':h cinoptions' for details
set cinoptions=:0,(s,u0,U1,g0,t0

" Give one virtual space at end of line
set virtualedit=onemore

" Use one space, not two, after punctuation.
set nojoinspaces

" Shown whitespace characters
set listchars=tab:‣\ ,extends:,precedes:,trail:␣,nbsp:+
set showbreak=└
" Old settings (works w/ some typefaces)
"set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:␣
"set showbreak=↪
set list

" Trailing whitespace only not in insert mode
augroup trailing
  au!
  au InsertEnter * :set listchars-=trail:␣
  au InsertLeave * :set listchars+=trail:␣
augroup END


"     Mouse
"----------------------------------------------------------

if has("mouse")
  set mouse=a
endif
set mousehide           " Hide mouse pointer on insert mode."
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2
end


"     Search
"----------------------------------------------------------

set incsearch           " Incremental search
set hlsearch            " Highlight search match
set ignorecase          " Do case insensitive matching
set smartcase           " Do not ignore if search pattern has CAPS
set gdefault            " Search is global on the line instead of 1st match


"     Directories
"----------------------------------------------------------

call system('mkdir -vp ~/.backup/undo/ > /dev/null 2>&1')
set backupdir=~/.backup,.       " List of directories for the backup file
set directory=~/.backup,~/tmp,. " List of directory names for the swap file
set nobackup            " Do not write backup files
" Skip backups on OSX temp dir, for crontab -e to properly work
set backupskip+=~/tmp/*,/private/tmp/*
set noswapfile          " Do not write .swp files
set undofile
set undodir=~/.backup/undo/,~/tmp,.


"     Folding
"----------------------------------------------------------

set foldcolumn=0        " Columns for folding
set foldmethod=indent
set foldlevel=9
set nofoldenable        " Don't fold by default



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Mappings
"==========================================================

let mapleader = " "
let maplocalleader = "\\"

" No arrow keys allowed!
nnoremap <up> :echo "Use 'k' to move up."<cr>
nnoremap <down> :echo "Use 'j' to move down."<cr>
nnoremap <left> :echo "Use 'h' to move left."<cr>
nnoremap <right> :echo "Use 'l' to move right."<cr>
" Fix VIM issue where arrow keys in insert mode insert letters
imap OA <C-o>:echo "Use 'k' to move up."<cr>
imap OB <C-o>:echo "Use 'j' to move down."<cr>
imap OC <C-o>:echo "Use 'l' to move right."<cr>
imap OD <C-o>:echo "Use 'h' to move left."<cr>

" Move by screen line, not file line
nnoremap j gj
nnoremap k gk

" Easier command and escape keys
inoremap kj <esc>
inoremap jk <esc>
inoremap <esc> <nop>

" Fast editing of the .vimrc
nnoremap <leader>e :e! ~/.vimrc<cr>

" Sane regexes
" Using incsearch instead
"nnoremap / /\v
"vnoremap / /\v
"nnoremap ? ?\v
"vnoremap ? ?\v
"nnoremap :s/ :s/\v

" Clear highlight after search
"noremap <silent><leader>/ :nohlsearch<CR>

" Middle-click paste
noremap! <s-insert> <middlemouse>

" Close & save files
nnoremap <leader>s :w<cr>
nnoremap <leader>q :q<cr>
" Using BufKill instead
"nnoremap <leader>w :NERDTreeClose<cr>:bdelete<cr>

" Map Y to yank to line end (similar to D & C)
nnoremap Y y$

" Bubble line transpose
nmap K [e
nmap J ]e
vmap K [egv
vmap J ]egv

" Easy goto begin and end of line
noremap H ^
noremap L g_

" Reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" Shortcuts for windows
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>V <C-w>s
" Disabled since tmux-navigator handles
"nnoremap <C-h> <C-w>h
"nnoremap <C-j> <C-w>j
"nnoremap <C-k> <C-w>k
"nnoremap <C-l> <C-w>l

" Easy search and replace
nnoremap <leader>f /\v<c-r><c-w>
nnoremap <leader>g :%s/<c-r><c-w>//gc<left><left><left>

" Auto center
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz

" Tab completion
" - Will insert tab at beginning of line,
" - Will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-p>

" Improved Join (like gJ, but always remove spaces)
function! JoinSpaceless()
    execute 'normal gJ'

    " Character under cursor is whitespace?
    if matchstr(getline('.'), '\%' . col('.') . 'c.') =~ '\s'
        " When remove it!
        execute 'normal dw'
    endif
endfunction
nnoremap <Leader>J :call JoinSpaceless()<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Plugin Configuration
"==========================================================

"   Airline
"----------------------------------------------------------

let g:airline_powerline_fonts = 1
let g:airline_extensions=['tabline', 'branch', 'ctrlspace']

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#ctrlspace#enabled = 1


"   NERDTree
"----------------------------------------------------------

let NERDTreeWinPos='right'
noremap \ :NERDTreeToggle<cr>
noremap \| :NERDTreeFind<cr>

autocmd bufenter *
  \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())
  \   | q |
  \ endif
let NERDTreeIgnore=['\.DS_Store$']
let NERDTreeShowHidden=1
let g:NERDTreeDirArrowExpandable='+'
let g:NERDTreeDirArrowCollapsible='~'


"   NERDCommenter
"----------------------------------------------------------

" Invert comment on the current line/selection
nmap <c-_> :call NERDComment(0, "invert")<cr>
vmap <c-_> :call NERDComment(0, "invert")<cr>


"   Fugitive
"----------------------------------------------------------

nmap <leader>gs :Gstatus<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>ga :Gwrite<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gd :Gdiff<cr>


"   CtrlP
"----------------------------------------------------------

"let g:ctrlp_custom_ignore = {
  "\ 'dir':  '\v[\/](\.git|\.hg|\.svn|node_modules)$',
  "\ 'file': '\v\.(exe|so|dll)$',
  "\ }
"let g:ctrlp_map = '<leader>,'


"   CtrlSpace
"----------------------------------------------------------

if executable("ag")
  let g:CtrlSpaceGlobCommand = 'ag -l --hidden --nocolor -g ""'
endif
let g:CtrlSpaceLoadLastWorkspaceOnStart = 0
let g:CtrlSpaceSaveWorkspaceOnSwitch = 1
let g:CtrlSpaceSaveWorkspaceOnExit = 1

let g:CtrlSpaceUseUnicode = 0


nnoremap <silent><leader><leader> :CtrlSpace O<cr>
let g:CtrlSpaceProjectRootMarkers = [
         \ ".git",
         \ ".hg",
         \ ".svn",
         \ ".bzr",
         \ "_darcs",
         \ "CVS",
         \ ".classpath"
         \ ]


"   Syntastic
"----------------------------------------------------------

if !empty(glob("~/.vim/bundle/syntastic/plugin/syntastic.vim"))
    let g:syntastic_javascript_checkers = ['eslint']
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0

    let g:syntastic_error_symbol = "✗"
    let g:syntastic_warning_symbol = "!"

    map <F8> :SyntasticCheck<cr>
endif


"   delimitMate
"----------------------------------------------------------

let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1


"   sneak.vim
"----------------------------------------------------------

let g:sneak#streak = 1
let g:sneak#s_next = 1

" Replace 'f' with 1-char Sneak
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F
" Replace 't' with 1-char Sneak
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T


"   Tmux Navigate
"----------------------------------------------------------

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>


"   Unite
"----------------------------------------------------------

if !empty(glob("~/.vim/bundle/unite.vim/plugin/unite.vim"))
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_rank'])

    let g:unite_source_history_yank_enable = 1

    nnoremap <Tab> :<C-u>Unite -no-split -auto-preview -select=1 -immediately -buffer-name=mru neomru/file<cr>
    " TODO: Use .gitignore to filter
    nnoremap <leader>tr :<C-u>Unite -no-split -start-insert -toggle -buffer-name=mixed buffer neomru/file file_rec bookmark<cr><c-u>
    "nnoremap <leader>tt :<C-u>Unite -no-split -start-insert -buffer-name=files file_rec<cr>
    nnoremap <leader>tf :<C-u>Unite -no-split -buffer-name=files file<cr>
    nnoremap <leader>ty :<C-u>Unite -auto-preview -buffer-name=yank history/yank<cr>
    "nnoremap <leader>tf :<C-u>Unite -start-insert -no-quit -buffer-name=search grep:.<cr>
    nnoremap <leader>tl :<C-u>Unite -start-insert -direction=dynamictop -auto-resize -buffer-name=line line<cr>
    nnoremap <leader>tb :<C-u>Unite -no-split -auto-preview -buffer-name=buffer buffer neomru/file<cr>

    autocmd FileType unite call s:unite_settings()
    function! s:unite_settings()
        nmap <buffer> Q <plug>(unite_exit)
        nmap <buffer> <esc> <plug>(unite_exit)
        imap <buffer> <esc> <plug>(unite_exit)
        " TODO: Only for MRU (tab)
        nmap <buffer> <Tab> <Plug>(unite_do_default_action)
    endfunction

    if executable('ag')
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts =
              \ '-i --vimgrep --hidden --ignore ' .
              \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
        let g:unite_source_grep_recursive_opt = ''
    elseif executable('ack')
        let g:unite_source_grep_command = 'ack'
        let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
        let g:unite_source_grep_recursive_opt = ''
    endif
endif

"   BufKill
"----------------------------------------------------------

let g:BufKillOverrideCtrlCaret = 1
nnoremap <leader>w :BD<cr>
"nnoremap <Tab> :BB<cr>
"nnoremap <S-Tab> :BF<cr>


"   incsearch.vim
"----------------------------------------------------------

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" :h g:incsearch#auto_nohlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   File Types (Markdown, JS, Toml, etc)
"==========================================================

autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = [
  \ 'python',
  \ 'css',
  \ 'erb=eruby',
  \ 'javascript',
  \ 'js=javascript',
  \ 'json=javascript',
  \ 'ruby',
  \ 'sass',
  \ 'xml',
  \ 'html'
\ ]

let g:jsx_ext_required = 0

autocmd BufNewFile,BufReadPost *.toml set filetype=toml

autocmd FileType python nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Appearance
"==========================================================

set background=dark

" Use the first available colorscheme in this list
for scheme in ['gruvbox', 'seoul256', 'solarized', 'molokai']
  try
    execute 'colorscheme '.scheme
    break
  catch
    continue
  endtry
endfor

" let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
" let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Color columns after 80 chars
let &colorcolumn=join(range(81,500),",")
highlight ColorColumn ctermbg=236



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Local
"=========================================================

set exrc